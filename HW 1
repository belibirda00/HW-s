!pip install -q -U kaggle_environments
import numpy as np
import pandas as pd
import random

import matplotlib.pyplot as plt
import seaborn as sns

from kaggle_environments import make, evaluate


%%writefile rock_agent.py
def only_rock(observation, configuration):
    return 0


%%writefile paper_agent.py
def only_paper(observation, configuration):
    return 1


%%writefile scissors_agent.py
def only_scissors(observation, configuration):
    return 2


%%writefile copy_opponent_agent.py
def copy_opponent(observation, configuration):
    if observation.step > 0:
        return observation.lastOpponentAction
    else:
        return random.randrange(0, configuration.signs)


%%writefile random_agent.py
def random(observation, configuration):
    import random
    return random.randint(0, 2)


%%writefile statistical_agent.py
action_histogram = {}
def statistical(observation, configuration):
    global action_histogram
    if observation.step == 0:
        action_histogram = {}
        return
    action = observation.lastOpponentAction
    if action not in action_histogram:
        action_histogram[action] = 0
    action_histogram[action] += 1
    mode_action = None
    mode_action_count = None
    for k, v in action_histogram.items():
        if mode_action_count is None or v > mode_action_count:
            mode_action = k
            mode_action_count = v
            continue
    return (mode_action + 1) % configuration.signs
    
    
%%writefile random0_1_agent.py
def random(observation, configuration):
    import random
    return random.randint(0, 1)
    
    
%%writefile random1_2_agent.py
def random(observation, configuration):
    import random
    return random.randint(1, 2)
 

%%writefile in_turn_agent.py
def in_turn(observation, configuration):
    for i in range(0, 100):
        i = i%3
        return i


env = make(
    "rps", 
    configuration={
        "episodeSteps": 100
    }
)


env.run(
    ["rock_agent.py", "paper_agent.py"]
)
env.render(mode="ipython", width=500, height=400)


evaluate(
    "rps", 
    ["rock_agent.py", "paper_agent.py"], 
    configuration={"episodeSteps": 100}
)


list_names = [
    "rock_agent", 
    "paper_agent", 
    "scissors_agent",
    "copy_opponent_agent",
    "random_agent",
    "statistical_agent",
    "random0_1_agent",
    "random1_2_agent",
    "in_turn_agent",
]
list_agents = [agent_name + ".py" for agent_name in list_names]
n_agents = len(list_names)
scores = np.zeros((n_agents, n_agents), dtype=np.int_)


print("Simulation of battles. It can take some time...")
for ind_agent_1 in range(len(list_names)):
    for ind_agent_2 in range(ind_agent_1 + 1, len(list_names)):
        print(
            f"LOG: {list_names[ind_agent_1]} vs {list_names[ind_agent_2]}", 
            end="\r"
        )
        current_score = evaluate(
            "rps", 
            [list_agents[ind_agent_1], list_agents[ind_agent_2]], 
            configuration={"episodeSteps": 100}
        )
        scores[ind_agent_1, ind_agent_2] = current_score[0][0]
        scores[ind_agent_2, ind_agent_1] = current_score[0][1]
    print()


df_scores = pd.DataFrame(
    scores, 
    index=list_names, 
    columns=list_names,
)
plt.figure(figsize=(9, 9))
sns.heatmap(
    df_scores, annot=True, cbar=False, 
    cmap='coolwarm', linewidths=1, 
    linecolor='black', fmt="d",
)
plt.xticks(rotation=90, fontsize=15)
plt.yticks(fontsize=15);
